using System.Text;
using Plugins;
using UnityEngine;

namespace script.core.db.migration
{
	public class SAVEData : AbstractData {
		public int SAVE_ID = 0;
		public string SCENE_ID = "";
		public int CLASSROOM_PROCEDURE = 0;
		public int CORRIDOR_PROCEDURE = 0;
		public int ARTROOM_PROCEDURE = 0;
		public int SCHOOLYARD_PROCEDURE = 0;
		public int STARTING = 0;
		public int CANCOMEINCLASSROOM = 0;
		public int HASQUIZA = 0;
		public int HASCICADA = 0;
		public int HASBROOM = 0;
		public int ISCOMPLETEDQUIZA = 0;
		public int HASQUIZB = 0;
		public int CANSEARCHMARBLE = 0;
		public int CANSEARCHMATOMARI = 0;
		public int HASGRAVEROADA = 0;
		public int CANGETGRAVEROADB = 0;
		public int HASGRAVEROADB = 0;
		public int HASMATOMARI = 0;
		public int CANCREATENERIKESHI = 0;
		public int HASGLUE = 0;
		public int ISFINISHEDWASHINGHANDS = 0;
		public int HASDUSTER = 0;
		public int HASNERIKESHI = 0;
		public int CANGETMUDDUMPLINGS = 0;
		public int HASMUDDUMPLINGS = 0;
		public int HASMARBLE = 0;
		public int HASQUIZC = 0;
		public int HASQUIZD = 0;
		public int ISFINISHEDFIRSTUNLOCKING = 0;
		public int ISFINISHEDSECONDUNLOCKING = 0;
		public int HASQUIZE = 0;
		public int CANFLOWENDROLL = 0;
		public int ISCOMPLETEDSHINOBUROOMA = 0;
		public string CLASSMATEONAME = "";
		public string CLASSMATERNAME = "";
		public string CLASSMATESNAME = "";

		public override void DebugPrint() {
			Debug.Log("SAVEData SAVE_ID=" + SAVE_ID + ", SCENE_ID=" + SCENE_ID + ", CLASSROOM_PROCEDURE=" + CLASSROOM_PROCEDURE + ", CORRIDOR_PROCEDURE=" + CORRIDOR_PROCEDURE + ", ARTROOM_PROCEDURE=" + ARTROOM_PROCEDURE + ", SCHOOLYARD_PROCEDURE=" + SCHOOLYARD_PROCEDURE + ", STARTING=" + STARTING + ", CANCOMEINCLASSROOM=" + CANCOMEINCLASSROOM + ", HASQUIZA=" + HASQUIZA + ", HASCICADA=" + HASCICADA + ", HASBROOM=" + HASBROOM + ", ISCOMPLETEDQUIZA=" + ISCOMPLETEDQUIZA + ", HASQUIZB=" + HASQUIZB + ", CANSEARCHMARBLE=" + CANSEARCHMARBLE + ", CANSEARCHMATOMARI=" + CANSEARCHMATOMARI + ", HASGRAVEROADA=" + HASGRAVEROADA + ", CANGETGRAVEROADB=" + CANGETGRAVEROADB + ", HASGRAVEROADB=" + HASGRAVEROADB + ", HASMATOMARI=" + HASMATOMARI + ", CANCREATENERIKESHI=" + CANCREATENERIKESHI + ", HASGLUE=" + HASGLUE + ", ISFINISHEDWASHINGHANDS=" + ISFINISHEDWASHINGHANDS + ", HASDUSTER=" + HASDUSTER + ", HASNERIKESHI=" + HASNERIKESHI + ", CANGETMUDDUMPLINGS=" + CANGETMUDDUMPLINGS + ", HASMUDDUMPLINGS=" + HASMUDDUMPLINGS + ", HASMARBLE=" + HASMARBLE + ", HASQUIZC=" + HASQUIZC + ", HASQUIZD=" + HASQUIZD + ", ISFINISHEDFIRSTUNLOCKING=" + ISFINISHEDFIRSTUNLOCKING + ", ISFINISHEDSECONDUNLOCKING=" + ISFINISHEDSECONDUNLOCKING + ", HASQUIZE=" + HASQUIZE + ", CANFLOWENDROLL=" + CANFLOWENDROLL + ", ISCOMPLETEDSHINOBUROOMA=" + ISCOMPLETEDSHINOBUROOMA + ", CLASSMATEONAME=" + CLASSMATEONAME + ", CLASSMATERNAME=" + CLASSMATERNAME + ", CLASSMATESNAME=" + CLASSMATESNAME);
		}
	}

	public class SAVETable : AbstractDbTable<SAVEData> {
		private static readonly string COL_SAVE_ID = "SAVE_ID";
		private static readonly string COL_SCENE_ID = "SCENE_ID";
		private static readonly string COL_CLASSROOM_PROCEDURE = "CLASSROOM_PROCEDURE";
		private static readonly string COL_CORRIDOR_PROCEDURE = "CORRIDOR_PROCEDURE";
		private static readonly string COL_ARTROOM_PROCEDURE = "ARTROOM_PROCEDURE";
		private static readonly string COL_SCHOOLYARD_PROCEDURE = "SCHOOLYARD_PROCEDURE";
		private static readonly string COL_STARTING = "STARTING";
		private static readonly string COL_CANCOMEINCLASSROOM = "CANCOMEINCLASSROOM";
		private static readonly string COL_HASQUIZA = "HASQUIZA";
		private static readonly string COL_HASCICADA = "HASCICADA";
		private static readonly string COL_HASBROOM = "HASBROOM";
		private static readonly string COL_ISCOMPLETEDQUIZA = "ISCOMPLETEDQUIZA";
		private static readonly string COL_HASQUIZB = "HASQUIZB";
		private static readonly string COL_CANSEARCHMARBLE = "CANSEARCHMARBLE";
		private static readonly string COL_CANSEARCHMATOMARI = "CANSEARCHMATOMARI";
		private static readonly string COL_HASGRAVEROADA = "HASGRAVEROADA";
		private static readonly string COL_CANGETGRAVEROADB = "CANGETGRAVEROADB";
		private static readonly string COL_HASGRAVEROADB = "HASGRAVEROADB";
		private static readonly string COL_HASMATOMARI = "HASMATOMARI";
		private static readonly string COL_CANCREATENERIKESHI = "CANCREATENERIKESHI";
		private static readonly string COL_HASGLUE = "HASGLUE";
		private static readonly string COL_ISFINISHEDWASHINGHANDS = "ISFINISHEDWASHINGHANDS";
		private static readonly string COL_HASDUSTER = "HASDUSTER";
		private static readonly string COL_HASNERIKESHI = "HASNERIKESHI";
		private static readonly string COL_CANGETMUDDUMPLINGS = "CANGETMUDDUMPLINGS";
		private static readonly string COL_HASMUDDUMPLINGS = "HASMUDDUMPLINGS";
		private static readonly string COL_HASMARBLE = "HASMARBLE";
		private static readonly string COL_HASQUIZC = "HASQUIZC";
		private static readonly string COL_HASQUIZD = "HASQUIZD";
		private static readonly string COL_ISFINISHEDFIRSTUNLOCKING = "ISFINISHEDFIRSTUNLOCKING";
		private static readonly string COL_ISFINISHEDSECONDUNLOCKING = "ISFINISHEDSECONDUNLOCKING";
		private static readonly string COL_HASQUIZE = "HASQUIZE";
		private static readonly string COL_CANFLOWENDROLL = "CANFLOWENDROLL";
		private static readonly string COL_ISCOMPLETEDSHINOBUROOMA = "ISCOMPLETEDSHINOBUROOMA";
		private static readonly string COL_CLASSMATEONAME = "CLASSMATEONAME";
		private static readonly string COL_CLASSMATERNAME = "CLASSMATERNAME";
		private static readonly string COL_CLASSMATESNAME = "CLASSMATESNAME";

		public SAVETable(ref SqliteDatabase db) : base(ref db) {
		}

		protected override string TableName {
			get {
				return "SAVE";
			}
		}
		
		protected override string PrimaryKeyName { get { return COL_SAVE_ID; } }

		public override void MargeData(ref SqliteDatabase oldDb) {
			SAVETable oldTable = new SAVETable(ref oldDb);
			foreach (SAVEData oldData in oldTable.SelectAll()) {
				Update(oldData);
			}
		}

		public override void Update(SAVEData data) {
			if (data.SAVE_ID <= DbDefine.DB_INVALID_PRIMARY_ID) {
				return;
			}

			StringBuilder query = new StringBuilder();
			Debug.Log(data.SAVE_ID);
			SAVEData selectData = SelectFromPrimaryKey(data.SAVE_ID);
			if (selectData == null) {
				query.Append("INSERT INTO ");
				query.Append(TableName);
				query.Append(" VALUES(");
				query.Append(data.SAVE_ID);
				query.Append(",");
				query.Append("'");
				query.Append(data.SCENE_ID);
				query.Append("'");
				query.Append(",");
				query.Append(data.CLASSROOM_PROCEDURE);
				query.Append(",");
				query.Append(data.CORRIDOR_PROCEDURE);
				query.Append(",");
				query.Append(data.ARTROOM_PROCEDURE);
				query.Append(",");
				query.Append(data.SCHOOLYARD_PROCEDURE);
				query.Append(",");
				query.Append(data.STARTING);
				query.Append(",");
				query.Append(data.CANCOMEINCLASSROOM);
				query.Append(",");
				query.Append(data.HASQUIZA);
				query.Append(",");
				query.Append(data.HASCICADA);
				query.Append(",");
				query.Append(data.HASBROOM);
				query.Append(",");
				query.Append(data.ISCOMPLETEDQUIZA);
				query.Append(",");
				query.Append(data.HASQUIZB);
				query.Append(",");
				query.Append(data.CANSEARCHMARBLE);
				query.Append(",");
				query.Append(data.CANSEARCHMATOMARI);
				query.Append(",");
				query.Append(data.HASGRAVEROADA);
				query.Append(",");
				query.Append(data.CANGETGRAVEROADB);
				query.Append(",");
				query.Append(data.HASGRAVEROADB);
				query.Append(",");
				query.Append(data.HASMATOMARI);
				query.Append(",");
				query.Append(data.CANCREATENERIKESHI);
				query.Append(",");
				query.Append(data.HASGLUE);
				query.Append(",");
				query.Append(data.ISFINISHEDWASHINGHANDS);
				query.Append(",");
				query.Append(data.HASDUSTER);
				query.Append(",");
				query.Append(data.HASNERIKESHI);
				query.Append(",");
				query.Append(data.CANGETMUDDUMPLINGS);
				query.Append(",");
				query.Append(data.HASMUDDUMPLINGS);
				query.Append(",");
				query.Append(data.HASMARBLE);
				query.Append(",");
				query.Append(data.HASQUIZC);
				query.Append(",");
				query.Append(data.HASQUIZD);
				query.Append(",");
				query.Append(data.ISFINISHEDFIRSTUNLOCKING);
				query.Append(",");
				query.Append(data.ISFINISHEDSECONDUNLOCKING);
				query.Append(",");
				query.Append(data.HASQUIZE);
				query.Append(",");
				query.Append(data.CANFLOWENDROLL);
				query.Append(",");
				query.Append(data.ISCOMPLETEDSHINOBUROOMA);
				query.Append(",");
				query.Append("'");
				query.Append(data.CLASSMATEONAME);
				query.Append("'");
				query.Append(",");
				query.Append("'");
				query.Append(data.CLASSMATERNAME);
				query.Append("'");
				query.Append(",");
				query.Append("'");
				query.Append(data.CLASSMATESNAME);
				query.Append("'");
				query.Append(");");
			} else {
				query.Append("UPDATE ");
				query.Append(TableName);
				query.Append(" SET ");
				query.Append(COL_SCENE_ID);
				query.Append("=");
				query.Append("'");
				query.Append(data.SCENE_ID);
				query.Append("'");
				query.Append(",");
				query.Append(COL_CLASSROOM_PROCEDURE);
				query.Append("=");
				query.Append(data.CLASSROOM_PROCEDURE);
				query.Append(",");
				query.Append(COL_CORRIDOR_PROCEDURE);
				query.Append("=");
				query.Append(data.CORRIDOR_PROCEDURE);
				query.Append(",");
				query.Append(COL_ARTROOM_PROCEDURE);
				query.Append("=");
				query.Append(data.ARTROOM_PROCEDURE);
				query.Append(",");
				query.Append(COL_SCHOOLYARD_PROCEDURE);
				query.Append("=");
				query.Append(data.SCHOOLYARD_PROCEDURE);
				query.Append(",");
				query.Append(COL_STARTING);
				query.Append("=");
				query.Append(data.STARTING);
				query.Append(",");
				query.Append(COL_CANCOMEINCLASSROOM);
				query.Append("=");
				query.Append(data.CANCOMEINCLASSROOM);
				query.Append(",");
				query.Append(COL_HASQUIZA);
				query.Append("=");
				query.Append(data.HASQUIZA);
				query.Append(",");
				query.Append(COL_HASCICADA);
				query.Append("=");
				query.Append(data.HASCICADA);
				query.Append(",");
				query.Append(COL_HASBROOM);
				query.Append("=");
				query.Append(data.HASBROOM);
				query.Append(",");
				query.Append(COL_ISCOMPLETEDQUIZA);
				query.Append("=");
				query.Append(data.ISCOMPLETEDQUIZA);
				query.Append(",");
				query.Append(COL_HASQUIZB);
				query.Append("=");
				query.Append(data.HASQUIZB);
				query.Append(",");
				query.Append(COL_CANSEARCHMARBLE);
				query.Append("=");
				query.Append(data.CANSEARCHMARBLE);
				query.Append(",");
				query.Append(COL_CANSEARCHMATOMARI);
				query.Append("=");
				query.Append(data.CANSEARCHMATOMARI);
				query.Append(",");
				query.Append(COL_HASGRAVEROADA);
				query.Append("=");
				query.Append(data.HASGRAVEROADA);
				query.Append(",");
				query.Append(COL_CANGETGRAVEROADB);
				query.Append("=");
				query.Append(data.CANGETGRAVEROADB);
				query.Append(",");
				query.Append(COL_HASGRAVEROADB);
				query.Append("=");
				query.Append(data.HASGRAVEROADB);
				query.Append(",");
				query.Append(COL_HASMATOMARI);
				query.Append("=");
				query.Append(data.HASMATOMARI);
				query.Append(",");
				query.Append(COL_CANCREATENERIKESHI);
				query.Append("=");
				query.Append(data.CANCREATENERIKESHI);
				query.Append(",");
				query.Append(COL_HASGLUE);
				query.Append("=");
				query.Append(data.HASGLUE);
				query.Append(",");
				query.Append(COL_ISFINISHEDWASHINGHANDS);
				query.Append("=");
				query.Append(data.ISFINISHEDWASHINGHANDS);
				query.Append(",");
				query.Append(COL_HASDUSTER);
				query.Append("=");
				query.Append(data.HASDUSTER);
				query.Append(",");
				query.Append(COL_HASNERIKESHI);
				query.Append("=");
				query.Append(data.HASNERIKESHI);
				query.Append(",");
				query.Append(COL_CANGETMUDDUMPLINGS);
				query.Append("=");
				query.Append(data.CANGETMUDDUMPLINGS);
				query.Append(",");
				query.Append(COL_HASMUDDUMPLINGS);
				query.Append("=");
				query.Append(data.HASMUDDUMPLINGS);
				query.Append(",");
				query.Append(COL_HASMARBLE);
				query.Append("=");
				query.Append(data.HASMARBLE);
				query.Append(",");
				query.Append(COL_HASQUIZC);
				query.Append("=");
				query.Append(data.HASQUIZC);
				query.Append(",");
				query.Append(COL_HASQUIZD);
				query.Append("=");
				query.Append(data.HASQUIZD);
				query.Append(",");
				query.Append(COL_ISFINISHEDFIRSTUNLOCKING);
				query.Append("=");
				query.Append(data.ISFINISHEDFIRSTUNLOCKING);
				query.Append(",");
				query.Append(COL_ISFINISHEDSECONDUNLOCKING);
				query.Append("=");
				query.Append(data.ISFINISHEDSECONDUNLOCKING);
				query.Append(",");
				query.Append(COL_HASQUIZE);
				query.Append("=");
				query.Append(data.HASQUIZE);
				query.Append(",");
				query.Append(COL_CANFLOWENDROLL);
				query.Append("=");
				query.Append(data.CANFLOWENDROLL);
				query.Append(",");
				query.Append(COL_ISCOMPLETEDSHINOBUROOMA);
				query.Append("=");
				query.Append(data.ISCOMPLETEDSHINOBUROOMA);
				query.Append(",");
				query.Append(COL_CLASSMATEONAME);
				query.Append("=");
				query.Append("'");
				query.Append(data.CLASSMATEONAME);
				query.Append("'");
				query.Append(",");
				query.Append(COL_CLASSMATERNAME);
				query.Append("=");
				query.Append("'");
				query.Append(data.CLASSMATERNAME);
				query.Append("'");
				query.Append(",");
				query.Append(COL_CLASSMATESNAME);
				query.Append("=");
				query.Append("'");
				query.Append(data.CLASSMATESNAME);
				query.Append("'");
				query.Append(" WHERE ");
				query.Append(COL_SAVE_ID);
				query.Append("=");
				query.Append(data.SAVE_ID);
				query.Append(";");
			}
			Debug.Log(query.ToString());
			mDb.ExecuteNonQuery(query.ToString());
		}

		protected override SAVEData PutData(DataRow row) {
			SAVEData data = new SAVEData();
			data.SAVE_ID = GetIntValue(row, "SAVE_ID");
			data.SCENE_ID = GetStringValue(row, "SCENE_ID");
			data.CLASSROOM_PROCEDURE = GetIntValue(row, "CLASSROOM_PROCEDURE");
			data.CORRIDOR_PROCEDURE = GetIntValue(row, "CORRIDOR_PROCEDURE");
			data.ARTROOM_PROCEDURE = GetIntValue(row, "ARTROOM_PROCEDURE");
			data.SCHOOLYARD_PROCEDURE = GetIntValue(row, "SCHOOLYARD_PROCEDURE");
			data.STARTING = GetIntValue(row, "STARTING");
			data.CANCOMEINCLASSROOM = GetIntValue(row, "CANCOMEINCLASSROOM");
			data.HASQUIZA = GetIntValue(row, "HASQUIZA");
			data.HASCICADA = GetIntValue(row, "HASCICADA");
			data.HASBROOM = GetIntValue(row, "HASBROOM");
			data.ISCOMPLETEDQUIZA = GetIntValue(row, "ISCOMPLETEDQUIZA");
			data.HASQUIZB = GetIntValue(row, "HASQUIZB");
			data.CANSEARCHMARBLE = GetIntValue(row, "CANSEARCHMARBLE");
			data.CANSEARCHMATOMARI = GetIntValue(row, "CANSEARCHMATOMARI");
			data.HASGRAVEROADA = GetIntValue(row, "HASGRAVEROADA");
			data.CANGETGRAVEROADB = GetIntValue(row, "CANGETGRAVEROADB");
			data.HASGRAVEROADB = GetIntValue(row, "HASGRAVEROADB");
			data.HASMATOMARI = GetIntValue(row, "HASMATOMARI");
			data.CANCREATENERIKESHI = GetIntValue(row, "CANCREATENERIKESHI");
			data.HASGLUE = GetIntValue(row, "HASGLUE");
			data.ISFINISHEDWASHINGHANDS = GetIntValue(row, "ISFINISHEDWASHINGHANDS");
			data.HASDUSTER = GetIntValue(row, "HASDUSTER");
			data.HASNERIKESHI = GetIntValue(row, "HASNERIKESHI");
			data.CANGETMUDDUMPLINGS = GetIntValue(row, "CANGETMUDDUMPLINGS");
			data.HASMUDDUMPLINGS = GetIntValue(row, "HASMUDDUMPLINGS");
			data.HASMARBLE = GetIntValue(row, "HASMARBLE");
			data.HASQUIZC = GetIntValue(row, "HASQUIZC");
			data.HASQUIZD = GetIntValue(row, "HASQUIZD");
			data.ISFINISHEDFIRSTUNLOCKING = GetIntValue(row, "ISFINISHEDFIRSTUNLOCKING");
			data.ISFINISHEDSECONDUNLOCKING = GetIntValue(row, "ISFINISHEDSECONDUNLOCKING");
			data.HASQUIZE = GetIntValue(row, "HASQUIZE");
			data.CANFLOWENDROLL = GetIntValue(row, "CANFLOWENDROLL");
			data.ISCOMPLETEDSHINOBUROOMA = GetIntValue(row, "ISCOMPLETEDSHINOBUROOMA");
			data.CLASSMATEONAME = GetStringValue(row, "CLASSMATEONAME");
			data.CLASSMATERNAME = GetStringValue(row, "CLASSMATERNAME");
			data.CLASSMATESNAME = GetStringValue(row, "CLASSMATESNAME");
			return data;
		}
	}
}